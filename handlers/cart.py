import asyncioimport refrom aiogram import F, Routerfrom aiogram.fsm.context import FSMContextfrom aiogram.fsm.state import StatesGroup, Statefrom aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, CallbackQueryfrom db import get_cart, get_connection, save_order, clear_cart, update_cart_quantity, delete_from_cartfrom keyboards.all_kb import main_kb, manage_cart_kbcart_router = Router()conn = get_connection()cursor = conn.cursor()PHONE_NUMBER_REGEX = r'^\+?\d{11}$'class OrderForm(StatesGroup):    """Класс для состояний оформления заказа."""    phone_number = State()@cart_router.message(F.text == 'Корзина')async def cart(message: Message):    """Отображает корзину пользователя и предоставляет возможность изменить количество товаров и оформить заказ."""    items_info, total_sum = get_cart(message.chat.id)    if items_info:        cart_message = "В вашей корзине следующие товары:\n"        for item in items_info:            id, product_name, quantity, product_price = item            cart_message += f"- {product_name}: x{quantity}, цена за единицу: {product_price}₽\n"        cart_message += f"\nОбщая сумма: {total_sum}₽"        await message.answer(cart_message, reply_markup=manage_cart_kb(items_info))    else:        await message.answer("Ваша корзина пуста.")@cart_router.callback_query(F.data.startswith('update_quality'))async def update_cart_quantity_callback(callback_query: CallbackQuery):    """Обновляет количество товара в корзине по кнопке."""    _, product_id, operation = callback_query.data.split(':')    success = update_cart_quantity(conn, callback_query.from_user.id, product_id[0], operation)    if success:        await callback_query.answer("Количество товара обновлено.")    else:        print(f"Не удалось обновить количество товара {product_id}")        await callback_query.answer("Не удалось обновить количество товара.", show_alert=True)    await cart(callback_query.message)@cart_router.callback_query(F.data.startswith('delete'))async def delete_from_cart_callback(callback_query: CallbackQuery):    """Удаляет товар из корзины по кнопке."""    product_id = callback_query.data.split(':')[1]    print(product_id)    success = delete_from_cart(conn, callback_query.from_user.id, product_id[0])    if success:        await callback_query.answer("Товар удалён из корзины.")        await cart(callback_query.message)    else:        print(f"Не удалось удалить товар {product_id}")        await callback_query.answer("Не удалось удалить товар.", show_alert=True)@cart_router.message(OrderForm.phone_number, F.text == 'Отмена')async def cancel_order(message: Message, state: FSMContext):    """Отменяет оформление заказа."""    await state.clear()    await message.answer("Оформление заказа отменено.", reply_markup=main_kb(message.from_user.id))@cart_router.callback_query(F.data.startswith('order'))async def handle_order_callback(callback_query: CallbackQuery, state: FSMContext):    """Обрабатывает запрос на оформление заказа."""    user_id = callback_query.from_user.id    await state.set_state(OrderForm.phone_number)    cancel_button = KeyboardButton(text="Отмена", request_contact=False)    keyboard = ReplyKeyboardMarkup(keyboard=[[cancel_button]], resize_keyboard=True)  # Исправлено здесь    await callback_query.message.answer("Пожалуйста, введите номер телефона в формате: 89993332221",                                        reply_markup=keyboard)    await callback_query.answer()@cart_router.message(OrderForm.phone_number)async def process_phone_number(message: Message, state: FSMContext):    """Обрабатывает номер телефона пользователя для оформления заказа."""    if message.content_type == 'contact':        phone_number = message.contact.phone_number    elif message.content_type == 'text':        phone_number = message.text.strip()    # Проверяем формат номера телефона    if not re.match(PHONE_NUMBER_REGEX, phone_number):        await message.answer("Номер телефона введен неверно. Пожалуйста, попробуйте еще раз.")        return    await state.update_data(phone_number=phone_number)    await finish_order(message, state)    await state.clear()async def finish_order(message: Message, state: FSMContext):    """Завершает оформление заказа после получения номера телефона и сохраняет заказ в базе данных."""    user_id = message.from_user.id    phone_number = (await state.get_data()).get("phone_number")    items_info, total_sum = get_cart(user_id)    if not phone_number:        await message.answer("Номер телефона не указан. Пожалуйста, введите номер телефона.")        return    if not items_info:        await message.answer("Ваша корзина пуста. Оформить заказ невозможно.")        return    try:        order_id = save_order(conn, user_id, phone_number, items_info, total_sum)        await message.answer("Ваш заказ успешно оформлен! Ожидайте звонка менеджера.",                             reply_markup=main_kb(message.from_user.id))        clear_cart(conn, user_id)    except Exception as e:        await message.answer("Произошла ошибка при оформлении заказа. Пожалуйста, попробуйте еще раз.")        print(f"Ошибка: {e}")